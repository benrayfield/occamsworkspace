opencl1.2:(global double* out, global const double* in){
	const double one	 = 1.0;
	//const double[] half = {0.5, -0.5,};
	const double half_0 = 0.5;
	//const double half_1 = -0.5;
	
	const double huge = 1.0E300;
	const double twom1000 = 9.332636185032189E-302;
	const double o_threshold = 709.782712893384;
	const double u_threshold = -745.1332191019411;
	const double ln2HI_0 = 0.6931471803691238;
	const double ln2LO_0 = 1.9082149292705877E-10;
	const double invln2 = 1.4426950408889634;
	const double P1 = 0.16666666666666602;
	const double P2 = -0.0027777777777015593;
	const double P3 = 6.613756321437934E-5;
	const double P4 = -1.6533902205465252E-6;
	const double P5 = 4.1381367970572385E-8;
	
	//double y;
	double y = 0;
	double hi = 0.0;
	double lo = 0.0;
	double c;
	double t;
	int k = 0;
	int xsb;
	/*unsigned*/ int hx;

	//hx  = __HI(x);  /* high word of x */
	hx = (int)(as_long(x)>>32);
	xsb = (hx >> 31) & 1;			   /* sign bit of x */
	hx &= 0x7fffffff;			   /* high word of |x| */
	
	double ret = 0;
	bool returned = false;

	/* filter out non-finite argument */
	if (hx >= 0x40862E42) {				  /* if |x| >= 709.78... */
		if (hx >= 0x7ff00000) {
			int loX = (int)as_long(x);
			if (((hx & 0xfffff) | loX) != 0)
				ret = x + x;				/* NaN */
			else
				ret = (xsb == 0) ? x : 0.0;	/* exp(+-inf) = {inf, 0} */
		}else if (x > o_threshold){
			ret = huge * huge; /* overflow */
		}else if (x < u_threshold){ // unsigned compare needed here?
			ret = twom1000 * twom1000; /* underflow */
		}
		returned = true;
	}

	if(!returned){
		/* argument reduction */
		if (hx > 0x3fd62e42) {		   /* if  |x| > 0.5 ln2 */
			if(hx < 0x3FF0A2B2) {	   /* and |x| < 1.5 ln2 */
				//hi = x - ln2HI[xsb];
				hi = x - (xsb==0 ? ln2HI_0 : -ln2HI_0);
				lo=(xsb==0 ? ln2LO_0 : -ln2LO_0);
				k = 1 - xsb - xsb;
			} else {
				//k  = (int)(invln2 * x + half[xsb]);
				k  = (int)(invln2 * x + (xsb==0 ? half_0 : -half_0));
				t  = k;
				//hi = x - t*ln2HI[0];	/* t*ln2HI is exact here */
				hi = x - t*ln2HI_0;	/* t*ln2HI is exact here */
				lo = t*ln2LO_0;
			}
			x  = hi - lo;
		} else if (hx < 0x3e300000)  {	 /* when |x|<2**-28 */
			if (huge + x > one){
				ret = one + x; /* trigger inexact */
				returned = true;
			}
		} else {
			k = 0;
		}

		/* x is now in primary range */
		t  = x * x;
		c  = x - t*(P1 + t*(P2 + t*(P3 + t*(P4 + t*P5))));
		if (k == 0){
			ret = one - ((x*c)/(c - 2.0) - x);
			returned = true;
		}else{
			y = one - ((lo - (x*c)/(2.0 - c)) - hi);
		}

		if(!returned){
			int hiY = (int)(as_long(y)>>32);
			if(k >= -1021) {
				//y = __HI(y, __HI(y) + (k << 20)); /* add k to y's exponent */
				//y = __HI(y, hiY + (k << 20)); /* add k to y's exponent */
				//
				//__HI(double y, int high) == as_double((as_raw_long(y)&0xffffffffL)|(((long)high))<<32)
				y = as_double((as_long(y)&0xffffffffL)|(((long)(hiY + (k << 20))))<<32); /* add k to y's exponent */
				ret = y;
			} else {
				//y = __HI(y, hiY + ((k + 1000) << 20)); /* add k to y's exponent */
				//
				//__HI(double y, int high) == as_double((as_raw_long(y)&0xffffffffL)|(((long)high))<<32)
				y = as_double((as_long(y)&0xffffffffL)|(((long)((k + 1000) << 20)))<<32); /* add k to y's exponent */
				ret = y * twom1000;
			}
		}
	}	
	return ret;	
}