[1.5611304600245907e9,"recurrentjavaLaggyBarelyLearningRecurrentjavaSwapstateMouseai",{"def" :"","prilist" :["lstmExperiments"],"uiTime" :1.561130458564736e9}]
[1.5611313941624484e9,"recurrentjavaLaggyBarelyLearningRecurrentjavaSwapstateMouseai",{"def" :"javaThread:mutable.mouseai.experiments.RecurrentjavaSimpleMouseai.main(new String[0])","prilist" :["lstmExperiments","r"],"uiTime" :1.5611304772049432e9}]
[1.5611325091536086e9,"recurrentjavaLaggyBarelyLearningRecurrentjavaSwapstateMouseai",{"def" :"javaThread:mutable.mouseai.experiments.RecurrentjavaSimpleMouseai.main(new String[0])\n\nproblem is the lstm weights quickly overfit to only 2 possible states of lstm, then they just decay toward mouse position. Instead it should converge to some near constant lstm weights. So I'm going to use a simpler testcase, recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit using the same ui but having chuasCircuit choose mouse position.\n\nInputs are now-timewindowsize to now-chaostime,and outputs are now-timewindowsize to now, so it cant cheat by using now to predict now.","prilist" :["recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit","lstmExperiments","r","delfaultDownStack"],"uiTime" :1.5611316880246422e9}]
[1.5611329121016576e9,"recurrentjavaLaggyBarelyLearningRecurrentjavaSwapstateMouseai",{"def" :"javaThread:mutable.mouseai.experiments.RecurrentjavaSimpleMouseai.main(new String[]{\"mouseYFraction\"});\n\n/*problem is the lstm weights quickly overfit to only 2 possible states of lstm, then they just decay toward mouse position. Instead it should converge to some near constant lstm weights. So I'm going to use a simpler testcase, recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit using the same ui but having chuasCircuit choose mouse position.\n\nInputs are now-timewindowsize to now-chaostime,and outputs are now-timewindowsize to now, so it cant cheat by using now to predict now.\n*/","prilist" :["recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit","lstmExperiments","r","delfaultDownStack"],"uiTime" :1.561132667363632e9}]
[1.5683885632879648e9,"recurrentjavaLaggyBarelyLearningRecurrentjavaSwapstateMouseai",{"def" :"javaThread:mutable.mouseai.experiments.RecurrentjavaSimpleMouseai.main(new String[]{\"mouseYFraction\"});\n\n/*problem is the lstm weights quickly overfit to only 2 possible states of lstm, then they just decay toward mouse position. Instead it should converge to some near constant lstm weights. So I'm going to use a simpler testcase, recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit using the same ui but having chuasCircuit choose mouse position.\n\nInputs are now-timewindowsize to now-chaostime,and outputs are now-timewindowsize to now, so it cant cheat by using now to predict now.\n*/","prilist" :["recurrentjavaSwapstateLstmOn1dViewOfChuasCircuit","lstmExperiments","r","delfaultDownStack"],"todoTime" :1.5677837456772966e9,"uiTime" :1.5683885456784482e9}]
